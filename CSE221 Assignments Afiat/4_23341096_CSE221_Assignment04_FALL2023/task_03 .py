# -*- coding: utf-8 -*-
"""Task_03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ieOydoSK4eBo0YDUtVEIgBq7t4f7V_iL
"""

from collections import defaultdict

def dfs_traversal(graph, start):
    visited = [False] * (len(graph) + 1)
    dfs_path = []

    def dfs(node):
        visited[node] = True
        dfs_path.append(node)

        for neighbor in graph[node]:
            if not visited[neighbor]:
                dfs(neighbor)

    dfs(start)
    return dfs_path

with open("/content/Input3.txt", "r") as file:
    N, M = map(int, file.readline().split())
    adjacency_list = defaultdict(list)

    for _ in range(M):
        edge = file.readline().split()
        ui = int(edge[0])
        vi = int(edge[1])
        adjacency_list[ui].append(vi)
        adjacency_list[vi].append(ui)

dfs_path = dfs_traversal(adjacency_list, 1)

for node in dfs_path:
    print(node, end=" ")

with open("/content/Output3.txt", "r") as output_file:
    expected_output = list(map(int, output_file.readline().split()))