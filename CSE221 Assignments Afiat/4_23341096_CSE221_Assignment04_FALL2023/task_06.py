# -*- coding: utf-8 -*-
"""Task_06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xTqUwSx3wsEI9FqxHqIPiITkRduNODnN
"""

def dfs_max_diamonds(grid, visited, row, col):
    if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]) or visited[row][col] or grid[row][col] == '#':
        return 0

    visited[row][col] = True
    diamonds = 1 if grid[row][col] == 'D' else 0

    max_diamonds = 0
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]

    for dr, dc in directions:
        max_diamonds = max(max_diamonds, dfs_max_diamonds(grid, visited, row + dr, col + dc))

    visited[row][col] = False
    return diamonds + max_diamonds
with open("/content/Input6.txt", "r") as file:
    R, H = map(int, file.readline().split())
    grid = []

    for _ in range(R):
        row = file.readline().strip()
        grid.append(row)
visited = [[False for _ in range(H)] for _ in range(R)]
max_diamonds = 0
for r in range(R):
    for c in range(H):
        if grid[r][c] == '.' and not visited[r][c]:
            max_diamonds = max(max_diamonds, dfs_max_diamonds(grid, visited, r, c))
print(max_diamonds)
with open("/content/Output6.txt", "r") as output_file:
    expected_max_diamonds = int(output_file.readline().strip())