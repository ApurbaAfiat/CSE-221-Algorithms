# -*- coding: utf-8 -*-
"""Task04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AA2xm3F6jTvkhBr7xBXW_hOsU0Mc4oYY
"""

file_input = open("/content/Input4.txt", "r")
file_output = open("/content/Output4.txt", "w")

list_1 = file_input.readline().split()
N, M = int(list_1[0]), int(list_1[1])

edges = []
parent = [i for i in range(N + 1)]
total_cost = 0

def find(x):
    if parent[x] != x:
        parent[x] = find(parent[x])
    return parent[x]

def union(x, y):
    root_x = find(x)
    root_y = find(y)

    if root_x != root_y:
        parent[root_y] = root_x

for _ in range(M):
    u, v, w = map(int, file_input.readline().split())
    edges.append((u, v, w))

edges.sort(key=lambda x: x[2])  # Sort edges by their weights

for edge in edges:
    u, v, w = edge
    if find(u) != find(v):
        union(u, v)
        total_cost += w

file_output.write(str(total_cost) + '\n')

file_input.close()
file_output.close()