# -*- coding: utf-8 -*-
"""Task03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E2lZJAebsbNYCvs5yL2fVcRJ5qoDSynX
"""

def dfs1(node, graph, visited, stack):
    visited[node] = True
    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs1(neighbor, graph, visited, stack)
    stack.append(node)

def dfs2(node, graph, visited, component):
    visited[node] = True
    component.append(node)
    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs2(neighbor, graph, visited, component)

def graph_func(graph, n):
    visited = [False] * (n + 1)
    stack = []

    for node in range(1, n + 1):
        if not visited[node]:
            dfs1(node, graph, visited, stack)

    reversed_graph = [[] for _ in range(n + 1)]
    for node in range(1, n + 1):
        for neighbor in graph[node]:
            reversed_graph[neighbor].append(node)

    visited = [False] * (n + 1)
    strongly_connected_components = []

    while stack:
        node = stack.pop()
        if not visited[node]:
            component = []
            dfs2(node, reversed_graph, visited, component)
            strongly_connected_components.append(component)

    return strongly_connected_components

input_filename = "/content/Input3.txt"
output_filename = "/content/Output3.txt"
with open(input_filename, "r") as input_file:
    N, M = map(int, input_file.readline().split())
    graph = [[] for _ in range(N + 1)]
    for _ in range(M):
        u, v = map(int, input_file.readline().split())
        graph[u].append(v)
x = graph_func(graph, N)
with open(output_filename, "w") as output_file:
    for component in x:
        output_file.write(" ".join(map(str, component)) + "\n")