# -*- coding: utf-8 -*-
"""Task01(a).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yFwAuUlgriZaXXM23pHF8F1JR9XrVrmA
"""

def dfs(graph, node, visited, order, in_progress):
    visited[node] = True
    in_progress[node] = True

    for x in graph[node]:
        if in_progress[x]:
            return False
        if not visited[x]:
            if not dfs(graph, x, visited, order, in_progress):
                return False
    in_progress[node] = False
    order.append(node)
    return True

def course_order_dfs(N, prerequisites):
    graph = [[] for _ in range(N + 1)]
    for prerequisite in prerequisites:
        graph[prerequisite[0]].append(prerequisite[1])

    visited = [False] * (N + 1)
    in_progress = [False] * (N + 1)
    order = []

    for i in range(1, N + 1):
        if not visited[i]:
            if not dfs(graph, i, visited, order, in_progress):
                return "IMPOSSIBLE"

    return order[::-1]
with open("/content/Input1(a).txt", "r") as f:
    N, M = map(int, f.readline().split())
    prerequisites = []
    for _ in range(M):
        A, B = map(int, f.readline().split())
        prerequisites.append((A, B))
course_order = course_order_dfs(N, prerequisites)
with open("/content/Output1(a).txt", "w") as f:
    if course_order == "IMPOSSIBLE":
        f.write(course_order)
    else:
        f.write(" ".join(map(str, course_order)))