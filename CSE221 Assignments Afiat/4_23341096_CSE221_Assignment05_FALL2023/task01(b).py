# -*- coding: utf-8 -*-
"""Task01(b).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z9ISG0N1LA0hP4-L0RvY6VMPX0zTzCat
"""

from collections import deque

def course_order_bfs(N, prerequisites):
    graph = [[] for _ in range(N + 1)]
    indegree = [0] * (N + 1)

    for prerequisite in prerequisites:
        graph[prerequisite[0]].append(prerequisite[1])
        indegree[prerequisite[1]] += 1

    queue = deque()
    for i in range(1, N + 1):
        if indegree[i] == 0:
            queue.append(i)

    order = []
    while queue:
        node = queue.popleft()
        order.append(node)
        for x in graph[node]:
            indegree[x] -= 1
            if indegree[x] == 0:
                queue.append(x)

    return order

with open("/content/Input1(b).txt", "r") as f:
    N, M = map(int, f.readline().split())
    prerequisites = []
    for _ in range(M):
        A, B = map(int, f.readline().split())
        prerequisites.append((A, B))
course_order = course_order_bfs(N, prerequisites)
with open("/content/Output1(b).txt", "w") as f:
    if len(course_order) == N:
        f.write(" ".join(map(str, course_order)))
    else:
        f.write("IMPOSSIBLE")