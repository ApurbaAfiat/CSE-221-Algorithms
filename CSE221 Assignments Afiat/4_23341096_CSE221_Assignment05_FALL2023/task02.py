# -*- coding: utf-8 -*-
"""Task02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QEPkhBn_9o5Vu43JCE6g6aknlf43ZEn_
"""

from collections import deque

def course_order_lexicographically_smallest(N, prerequisites):
    graph = [[] for _ in range(N + 1)]
    indegree = [0] * (N + 1)

    for prerequisite in prerequisites:
        graph[prerequisite[0]].append(prerequisite[1])
        indegree[prerequisite[1]] += 1

    queue = deque()
    for i in range(1, N + 1):
        if indegree[i] == 0:
            queue.append(i)

    order = []
    while queue:
        queue = deque(sorted(queue))
        node = queue.popleft()
        order.append(node)
        for neighbor in graph[node]:
            indegree[neighbor] -= 1
            if indegree[neighbor] == 0:
                queue.append(neighbor)

    return order
with open("/content/Input2.txt", "r") as input_file:
    N, M = map(int, input_file.readline().split())
    prerequisites = [tuple(map(int, line.split())) for line in input_file]
course_order = course_order_lexicographically_smallest(N, prerequisites)
with open("/content/Output2.txt", "w") as output_file:
    if len(course_order) == N:
        output_file.write(" ".join(map(str, course_order)))
    else:
        output_file.write("IMPOSSIBLE")